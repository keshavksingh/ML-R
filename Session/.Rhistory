set.seed(2)##generate random numbers starting from 2
proportion <- 0.50 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
library(ggvis)
library(class)   # required for knn
library(gmodels)
library("e1071")
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Iris-setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Iris-virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Iris-versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
## generate a random sample of 70 % records from each bundle i.e. 35 records
## each from sentosa, virginica and versicolor
## 70 % forms the traning dataset and 30 % test
set.seed(2)##generate random numbers starting from 2
proportion <- 0.50 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
##### Sampling comlete
##### Create the final train and test datasets
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
View(train)
head(train)
pcatrain<-subset(train,select = -c(Id,Species))
pcatest<-subset(test,select = -c(Id,Species))
prin_comp<-prcomp(pcatrain,scale. = T)
names(prin_comp)
biplot(prin_comp,scale = 0)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
head(train)
set.seed(2)##generate random numbers starting from 2
proportion <- 0.50 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
test_versicolor
library(ggvis)
library(class)   # required for knn
library(gmodels)
library("e1071")
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Iris-setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Iris-virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Iris-versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
set.seed(2)##generate random numbers starting from 2
proportion <- 0.50 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
View(train)
head(train)
pcatrain<-subset(train,select = -c(Id,Species))
pcatest<-subset(test,select = -c(Id,Species))
prin_comp<-prcomp(pcatrain,scale. = T)
names(prin_comp)
biplot(prin_comp,scale = 0)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
train.data <- data.frame(Result = train$Species, prin_comp$x)
train.data <- train.data[,1:4]
test.data <- predict(prin_comp, newdata = pcatest)
test.data <- as.data.frame(test.data)
test.data <- test.data[,1:3]
svm_model <- svm(Result~., data=train.data)
summary(svm_model)
pred <- predict(svm_model,test.data)
table(pred,test$Species)
library(ggvis)
library(class)   # required for knn
library(gmodels)
library("e1071")
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
## generate a random sample of 70 % records from each bundle i.e. 35 records
## each from sentosa, virginica and versicolor
## 70 % forms the traning dataset and 30 % test
set.seed(2)##generate random numbers starting from 2
proportion <- 0.80 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
##### Sampling comlete
##### Create the final train and test datasets
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
View(train)
head(train)
###############################
pcatrain<-subset(train,select = -c(Id,Species))
pcatest<-subset(test,select = -c(Id,Species))
prin_comp<-prcomp(pcatrain,scale. = T)
names(prin_comp)
biplot(prin_comp,scale = 0)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
##################### Predictive Modelling with PCA Picking 11 Principal Components
#### SVM
train.data <- data.frame(Result = train$Species, prin_comp$x)
train.data <- train.data[,1:4]
test.data <- predict(prin_comp, newdata = pcatest)
test.data <- as.data.frame(test.data)
test.data <- test.data[,1:3]
svm_model <- svm(Result~., data=train.data)
summary(svm_model)
pred <- predict(svm_model,test.data)
table(pred,test$Species)
library(ggvis)
library(class)   # required for knn
library(gmodels)
library("e1071")
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
## generate a random sample of 70 % records from each bundle i.e. 35 records
## each from sentosa, virginica and versicolor
## 70 % forms the traning dataset and 30 % test
set.seed(2)##generate random numbers starting from 2
proportion <- 0.80 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
##### Sampling comlete
##### Create the final train and test datasets
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
##View(train)
##head(train)
###############################
pcatrain<-subset(train,select = -c(Id,Species))
pcatest<-subset(test,select = -c(Id,Species))
prin_comp<-prcomp(pcatrain,scale. = T)
names(prin_comp)
biplot(prin_comp,scale = 0)
pcatrain<-subset(train,select = -c(Id,Species))
pcatest<-subset(test,select = -c(Id,Species))
prin_comp<-prcomp(pcatrain,scale. = T)
names(prin_comp)
biplot(prin_comp,scale = 0)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
train.data <- data.frame(Result = train$Species, prin_comp$x)
train.data <- train.data[,1:4]
train.data
test.data <- predict(prin_comp, newdata = pcatest)
test.data <- as.data.frame(test.data)
test.data <- test.data[,1:3]
test.data
svm_model <- svm(Result~., data=train.data)
summary(svm_model)
pred <- predict(svm_model,test.data)
table(pred,test$Species)
library("e1071")
library(ggvis)
library(class)
library(gmodels)
library(neuralnet)
library(nnet)
setwd("C:/Keshav/Engineering/ML/Session")
############################################################################################
##                         IRIS DataSet
############################################################################################
iris<-read.csv("IRIS.csv",header = TRUE)
layer_points(ggvis(iris, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))##
head(iris)
irisdf<-cbind(iris[,2:5],class.ind(iris$Species))
head(irisdf)
set.seed(2)
proportion <- 0.70 # Set to Split
index <- sample(1:nrow(irisdf), round(proportion*nrow(irisdf)))
train_iris <- irisdf[index, ]
test_iris <- irisdf[-index, ]
head(train_iris)
head(test_iris)
NROW(train_iris)
NROW(test_iris)
iris_n<-neuralnet(Setosa + Versicolor + Virginica ~ SepalLengthCm
+SepalWidthCm+PetalLengthCm+PetalWidthCm
, train_iris ,hidden = c(3))
plot(iris_n)
head(test_iris)
pred_test<-compute(iris_n,test_iris[,1:4])
predtestResult <- pred_test$net.result
predtestResult
colnames(predtestResult)<-c("Setosa","Versicolor","Virginica")
head(predtestResult)
result_IRIS <- colnames(predtestResult)[apply(predtestResult,1,which.max)]
result_IRIS<- as.data.frame(result_IRIS)
result_IRIS
IRIS_testdataset<-colnames(test_iris[,5:7])[apply(test_iris[,5:7],1,which.max)]
IRIS_testdataset
test_iris[,5:7]
IRIS_testdataset<-as.data.frame(IRIS_testdataset)
table(result_IRIS$result_IRIS,IRIS_testdataset$IRIS_testdataset)
version
library(ggvis)
library(class)
library(gmodels)
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
iris_full
head (iris_full)
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
set.seed(2)##generate random numbers starting from 2
proportion <- 0.70 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
trdata
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
train
trainFinal <- train[,c("PetalLengthCm","PetalWidthCm")]
train_lablel<-train[,c("Species")]
testFinal <- test[,c("PetalLengthCm","PetalWidthCm")]
test_lablel<-test[,c("Species")]
test_prediction <- knn(train = trainFinal, test = testFinal,cl = train_lablel, k=10) ##SQRT of 105
table (test_lablel,test_prediction)
test_prediction <- knn(train = trainFinal, test = testFinal,cl = train_lablel, k=9) ##SQRT of 105
#######Test Accuracy
table (test_lablel,test_prediction)
test_prediction <- knn(train = trainFinal, test = testFinal,cl = train_lablel, k=5) ##SQRT of 105
#######Test Accuracy
table (test_lablel,test_prediction)
#########################################
### Test Sepal Accuracy
#########################################
Sepaltrain <- train[,c("SepalLengthCm","SepalWidthCm")]
Sepaltrain_lablel<-train[,c("Species")]
Sepaltest <- test[,c("SepalLengthCm","SepalWidthCm")]
Sepaltest_lablel<-test[,c("Species")]
sepaltest_prediction <- knn(train = Sepaltrain, test = Sepaltest,cl = Sepaltrain_lablel, k=10) ##SQRT of 105
#######Test Accuracy
table (Sepaltest_lablel,sepaltest_prediction)
library("e1071")
library(ggvis)
library(class)   # required for knn
library(gmodels)
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
## generate a random sample of 70 % records from each bundle i.e. 35 records
## each from sentosa, virginica and versicolor
## 70 % forms the traning dataset and 30 % test
set.seed(2)##generate random numbers starting from 2
proportion <- 0.50 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
##### Sampling comlete
##### Create the final train and test datasets
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
trainFinal <- train[,c("PetalLengthCm","PetalWidthCm","Species")]
#train_lablel<-train[,c("Species")]
testFinal <- test[,c("PetalLengthCm","PetalWidthCm")]
test_lablel<-test[,c("Species")]
trainFinal
svm_model <- svm(Species ~ ., data=trainFinal)
pred <- predict(svm_model,testFinal)
table(pred,test_lablel)
Sepaltrain <- train[,c("SepalLengthCm","SepalWidthCm","Species")]
##Sepaltrain_lablel<-train[,c()]
Sepaltest <- test[,c("SepalLengthCm","SepalWidthCm")]
Sepaltest_lablel<-test[,c("Species")]
SepalSVM_model <- svm(Species ~ ., data=Sepaltrain)
#######Test Accuracy
predSepal <- predict(SepalSVM_model,Sepaltest)
table(predSepal,Sepaltest_lablel)
library(tree)
iris_full<-read.csv("C:/Keshav/Engineering/ML/Session/IRIS.csv")
head(iris_full)
nrow(iris_full)
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
## generate a random sample of 70 % records from each bundle i.e. 35 records
## each from sentosa, virginica and versicolor
## 70 % forms the traning dataset and 30 % test
set.seed(2)##generate random numbers starting from 2
proportion <- 0.50 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
##### Sampling comlete
##### Create the final train and test datasets
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
trainFinal <- train[,c("PetalLengthCm","PetalWidthCm","Species")]
#train_lablel<-train[,c("Species")]
testFinal <- test[,c("PetalLengthCm","PetalWidthCm")]
test_lablel<-test[,c("Species")]
treemodel<-tree(Species~.,trainFinal)
plot(treemodel)
text(treemodel,pretty = 0)
pre<-predict(treemodel,testFinal)
pre
colnames(pre)<-c("Setosa","Versicolor","Virginica")
head(pre)
result_IRIS <- colnames(pre)[apply(pre,1,which.max)]
result_IRIS<- as.data.frame(result_IRIS)
table(result_IRIS$result_IRIS,test_lablel)
pre
misClasificError <- mean(result_IRIS$result_IRIS != test_lablel)
print(paste('Accuracy',1-misClasificError))
library(ggvis)
library(class)   # required for knn
library(gmodels)
library("e1071")
setwd("C:/Keshav/Engineering/ML/Session")
iris_full <- read.csv("IRIS.csv")
layer_points(ggvis(iris_full, x = ~SepalLengthCm, y = ~SepalWidthCm, fill = ~Species ))
layer_points(ggvis(iris_full, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))
iris_sentosa <- iris_full[which(iris_full$Species == "Setosa"),,]##All records ##All Columns
nrow(iris_sentosa)
iris_virginica <- iris_full[which(iris_full$Species == "Virginica"),,]##All records ##All Columns
nrow(iris_virginica)
iris_versicolor <- iris_full[which(iris_full$Species == "Versicolor"),,]##All records ##All Columns
nrow(iris_versicolor)
## generate a random sample of 70 % records from each bundle i.e. 35 records
## each from sentosa, virginica and versicolor
## 70 % forms the traning dataset and 30 % test
set.seed(2)##generate random numbers starting from 2
proportion <- 0.80 # Set to Split
trdata <- sample(1:nrow(iris_sentosa),round(proportion*nrow(iris_sentosa)))
tstdata <- -trdata
train_sentosa <- iris_sentosa[trdata,]
test_sentosa <- iris_sentosa[tstdata,]
train_virginica <- iris_virginica[trdata,]
test_virginica <- iris_virginica[tstdata,]
train_versicolor <- iris_versicolor[trdata,]
test_versicolor <- iris_versicolor[tstdata,]
##### Sampling comlete
##### Create the final train and test datasets
train <- rbind(train_sentosa,train_versicolor,train_virginica) ## use rbind to combine training datasets
test <- rbind(test_sentosa,test_versicolor,test_virginica) ## use rbind to combine training datasets
##View(train)
##head(train)
pcatrain<-subset(train,select = -c(Id,Species))
pcatest<-subset(test,select = -c(Id,Species))
prin_comp<-prcomp(pcatrain,scale. = T)
pcatrain
names(prin_comp)
biplot(prin_comp,scale = 0)
prin_comp<-prcomp(pcatrain,scale. = T)
names(prin_comp)
std_dev <- prin_comp$sdev
pr_var <- std_dev^2
prop_varex <- pr_var/sum(pr_var)
plot(cumsum(prop_varex), xlab = "Principal Component",
ylab = "Cumulative Proportion of Variance Explained",
type = "b")
prop_varex
train.data <- data.frame(Result = train$Species, prin_comp$x)
train.data <- train.data[,1:4]
train.data
train.data <- data.frame(Result = train$Species, prin_comp$x)
train.data
train.data <- train.data[,1:4]
train.data
test.data <- predict(prin_comp, newdata = pcatest)
test.data <- as.data.frame(test.data)
test.data <- test.data[,1:3]
test.data
svm_model <- svm(Result~., data=train.data)
pred <- predict(svm_model,test.data)
table(pred,test$Species)
library("e1071")
library(ggvis)
library(class)
library(gmodels)
library(neuralnet)
library(nnet)
setwd("C:/Keshav/Engineering/ML/Session")
############################################################################################
##                         IRIS DataSet
############################################################################################
iris<-read.csv("IRIS.csv",header = TRUE)
layer_points(ggvis(iris, x = ~PetalLengthCm, y = ~PetalWidthCm, fill = ~Species ))##
head(iris)
irisdf<-cbind(iris[,2:5],class.ind(iris$Species))
head(irisdf)
set.seed(2)
proportion <- 0.70 # Set to Split
index <- sample(1:nrow(irisdf), round(proportion*nrow(irisdf)))
train_iris <- irisdf[index, ]
test_iris <- irisdf[-index, ]
head(train_iris)
head(test_iris)
NROW(train_iris)
NROW(test_iris)
iris_n<-neuralnet(Setosa + Versicolor + Virginica ~ SepalLengthCm
+SepalWidthCm+PetalLengthCm+PetalWidthCm
, train_iris ,hidden = c(3))
plot(iris_n)
